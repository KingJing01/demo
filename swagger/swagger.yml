swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /application/:
    get:
      tags:
      - application
      description: get Application
      operationId: ApplicationController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Application'
        "403":
          description: ""
    post:
      tags:
      - application
      description: create Application
      operationId: ApplicationController.Post
      parameters:
      - in: body
        name: body
        description: body for Application content
        required: true
        schema:
          $ref: '#/definitions/models.Application'
      responses:
        "201":
          description: '{int} models.Application'
        "403":
          description: body is empty
  /application/{id}:
    get:
      tags:
      - application
      description: get Application by id
      operationId: ApplicationController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Application'
        "403":
          description: :id is empty
    put:
      tags:
      - application
      description: update the Application
      operationId: ApplicationController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Application content
        required: true
        schema:
          $ref: '#/definitions/models.Application'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Application'
        "403":
          description: :id is not int
    delete:
      tags:
      - application
      description: delete the Application
      operationId: ApplicationController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /permission/:
    get:
      tags:
      - permission
      description: get Permission
      operationId: PermissionController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permission'
        "403":
          description: ""
    post:
      tags:
      - permission
      description: create Permission
      operationId: PermissionController.Post
      parameters:
      - in: body
        name: body
        description: body for Permission content
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      responses:
        "201":
          description: '{int} models.Permission'
        "403":
          description: body is empty
  /permission/{id}:
    get:
      tags:
      - permission
      description: get Permission by id
      operationId: PermissionController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permission'
        "403":
          description: :id is empty
    put:
      tags:
      - permission
      description: update the Permission
      operationId: PermissionController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Permission content
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Permission'
        "403":
          description: :id is not int
    delete:
      tags:
      - permission
      description: delete the Permission
      operationId: PermissionController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /role/:
    get:
      tags:
      - role
      description: get Role
      operationId: RoleController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Role'
        "403":
          description: ""
    post:
      tags:
      - role
      description: create Role
      operationId: RoleController.Post
      parameters:
      - in: body
        name: body
        description: body for Role content
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      responses:
        "201":
          description: '{int} models.Role'
        "403":
          description: body is empty
  /role/{id}:
    get:
      tags:
      - role
      description: get Role by id
      operationId: RoleController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Role'
        "403":
          description: :id is empty
    put:
      tags:
      - role
      description: update the Role
      operationId: RoleController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Role content
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Role'
        "403":
          description: :id is not int
    delete:
      tags:
      - role
      description: delete the Role
      operationId: RoleController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /ssouser/:
    get:
      tags:
      - ssouser
      description: get Ssouser
      operationId: SsouserController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Ssouser'
        "403":
          description: ""
    post:
      tags:
      - ssouser
      description: create Ssouser
      operationId: SsouserController.Post
      parameters:
      - in: body
        name: body
        description: body for Ssouser content
        required: true
        schema:
          $ref: '#/definitions/models.Ssouser'
      responses:
        "201":
          description: '{int} models.Ssouser'
        "403":
          description: body is empty
  /ssouser/{id}:
    get:
      tags:
      - ssouser
      description: get Ssouser by id
      operationId: SsouserController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Ssouser'
        "403":
          description: :id is empty
    put:
      tags:
      - ssouser
      description: update the Ssouser
      operationId: SsouserController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Ssouser content
        required: true
        schema:
          $ref: '#/definitions/models.Ssouser'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Ssouser'
        "403":
          description: :id is not int
    delete:
      tags:
      - ssouser
      description: delete the Ssouser
      operationId: SsouserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /user/:
    get:
      tags:
      - user
      description: get User
      operationId: UserController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: ""
    post:
      tags:
      - user
      description: create User
      operationId: UserController.Post
      parameters:
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: '{int} models.User'
        "403":
          description: body is empty
  /user/{id}:
    get:
      tags:
      - user
      description: get User by id
      operationId: UserController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is empty
    put:
      tags:
      - user
      description: update the User
      operationId: UserController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
    delete:
      tags:
      - user
      description: delete the User
      operationId: UserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /userrole/:
    get:
      tags:
      - userrole
      description: get Userrole
      operationId: UserroleController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Userrole'
        "403":
          description: ""
    post:
      tags:
      - userrole
      description: create Userrole
      operationId: UserroleController.Post
      parameters:
      - in: body
        name: body
        description: body for Userrole content
        required: true
        schema:
          $ref: '#/definitions/models.Userrole'
      responses:
        "201":
          description: '{int} models.Userrole'
        "403":
          description: body is empty
  /userrole/{id}:
    get:
      tags:
      - userrole
      description: get Userrole by id
      operationId: UserroleController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Userrole'
        "403":
          description: :id is empty
    put:
      tags:
      - userrole
      description: update the Userrole
      operationId: UserroleController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Userrole content
        required: true
        schema:
          $ref: '#/definitions/models.Userrole'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Userrole'
        "403":
          description: :id is not int
    delete:
      tags:
      - userrole
      description: delete the Userrole
      operationId: UserroleController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  .LoginResult:
    type: object
  .OperResult:
    type: object
  controllers.UserInfo:
    title: UserInfo
    type: object
    properties:
      Age:
        type: string
      Avatar:
        type: string
      EmailAddress:
        type: string
      Gender:
        type: string
      Name:
        type: string
      Permissions:
        type: array
        items:
          type: string
      PhoneNumber:
        type: string
      UserId:
        type: integer
        format: int64
      UserName:
        type: string
  models.Application:
    title: Application
    type: object
    properties:
      CreationTime:
        type: string
        format: datetime
      CreatorUserId:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      IsDeleted:
        type: integer
        format: int64
      SysName:
        type: string
      SysUrl:
        type: string
  models.Permission:
    title: Permission
    type: object
    properties:
      CreationTime:
        type: string
        format: datetime
      CreatorUserId:
        type: integer
        format: int64
      Discriminator:
        type: string
      DisplayName:
        type: string
      Id:
        type: integer
        format: int64
      IsGranted:
        type: integer
        format: int32
      Name:
        type: string
      RoleId:
        type: integer
        format: int64
      SysId:
        type: integer
        format: int64
      TenantId:
        type: integer
        format: int64
      UserId:
        type: integer
        format: int64
  models.Role:
    title: Role
    type: object
    properties:
      ConcurrencyStamp:
        type: string
      CreationTime:
        type: string
        format: datetime
      CreatorUserId:
        type: integer
        format: int64
      DeleterUserId:
        type: integer
        format: int64
      DeletionTime:
        type: string
        format: datetime
      Description:
        type: string
      DisplayName:
        type: string
      Id:
        type: integer
        format: int64
      IsDefault:
        type: integer
        format: int32
      IsDeleted:
        type: integer
        format: int32
      IsStatic:
        type: integer
        format: int32
      LastModificationTime:
        type: string
        format: datetime
      LastModifierUserId:
        type: integer
        format: int64
      Name:
        type: string
      NormalizedName:
        type: string
      TenantId:
        type: integer
        format: int64
  models.Ssouser:
    title: Ssouser
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Passwd:
        type: string
      Phone:
        type: string
  models.User:
    title: User
    type: object
    properties:
      AccessFailedCount:
        type: integer
        format: int64
      AuthenticationSource:
        type: string
      ConcurrencyStamp:
        type: string
      CreationTime:
        type: string
        format: datetime
      CreatorUserId:
        type: integer
        format: int64
      DeleterUserId:
        type: integer
        format: int64
      DeletionTime:
        type: string
        format: datetime
      EmailAddress:
        type: string
      EmailConfirmationCode:
        type: string
      Id:
        type: integer
        format: int64
      IsActive:
        type: integer
        format: int32
      IsDeleted:
        type: integer
        format: int32
      IsEmailConfirmed:
        type: integer
        format: int32
      IsLockoutEnabled:
        type: integer
        format: int32
      IsPhoneNumberConfirmed:
        type: integer
        format: int32
      IsTwoFactorEnabled:
        type: integer
        format: int32
      LastLoginTime:
        type: string
        format: datetime
      LastModificationTime:
        type: string
        format: datetime
      LastModifierUserId:
        type: integer
        format: int64
      LockoutEndDateUtc:
        type: string
        format: datetime
      Name:
        type: string
      NormalizedEmailAddress:
        type: string
      NormalizedUserName:
        type: string
      PasswordResetCode:
        type: string
      PhoneNumber:
        type: string
      SecurityStamp:
        type: string
      SsoId:
        description: sso验证id
        type: integer
        format: int64
      Surname:
        type: string
      SysId:
        type: integer
        format: int64
      TenantId:
        type: integer
        format: int64
      UserName:
        type: string
  models.Userrole:
    title: Userrole
    type: object
    properties:
      CreationTime:
        type: string
        format: datetime
      CreatorUserId:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      RoleId:
        type: integer
        format: int64
      SysId:
        type: integer
        format: int64
      TenantId:
        type: integer
        format: int64
      UserId:
        type: integer
        format: int64
tags:
- name: application
  description: |
    ApplicationController operations for Application
- name: permission
  description: |
    PermissionController operations for Permission
- name: role
  description: |
    RoleController operations for Role
- name: ssouser
  description: |
    SsouserController operations for Ssouser
- name: user
  description: |
    UserController operations for User
- name: userrole
  description: |
    UserroleController operations for Userrole
